openapi: 3.0.3
info:
  title: Membership API
  description: API for managing membership signups and retrieving member information
  version: 1.0.0

servers:
  - url: /api/v1
    description: Base API path

components:
  schemas:
    Member:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - acceptedTerms
      properties:
        firstName:
          type: string
          maxLength: 50
          example: "John"
        lastName:
          type: string
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phoneNumber:
          type: string
          pattern: '^\+?[\d\s-]{10,}$'
          example: "+1-555-123-4567"
        acceptedTerms:
          type: boolean
          example: true
        newsletterSubscription:
          type: boolean
          default: false
          example: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Error message description"

    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalCount:
          type: integer
          example: 100
        hasNextPage:
          type: boolean
          example: true
        hasPrevPage:
          type: boolean
          example: false
        limit:
          type: integer
          example: 10

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /membership/csrf-token:
    get:
      summary: Get CSRF token
      description: Retrieves a CSRF token for form submission
      responses:
        '200':
          description: CSRF token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /membership/signup:
    post:
      summary: Register new member
      description: Create a new membership registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          description: Member created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      member:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

  /membership:
    get:
      summary: Get all members
      description: Retrieves a paginated list of members with optional filtering and sorting
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortField
          schema:
            type: string
            enum: [firstName, lastName, email, createdAt, status]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - in: query
          name: search
          schema:
            type: string
          description: Search term for filtering members
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter by start date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter by end date
      responses:
        '200':
          description: List of members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: '#/components/schemas/Member'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

  /membership/{id}:
    get:
      summary: Get member by ID
      description: Retrieves a specific member by their ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Member ID
      responses:
        '200':
          description: Member retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      member:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /health:
    get:
      summary: Check API health
      description: Returns the health status of the API and its dependencies
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"
                  database:
                    type: object
                    properties:
                      isHealthy:
                        type: boolean
                      details:
                        type: object
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                  database:
                    type: object